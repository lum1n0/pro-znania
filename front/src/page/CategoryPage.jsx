// src/pages/CategoryPage.jsx
import React, { useEffect, useState, useRef, useMemo, useCallback } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { useCategoryStore } from '../store/categoryStore';
import { useArticleStore } from '../store/articleStore';
import { useAuthStore } from '../store/authStore';
import { useAccessRoleStore } from '../store/accessRoleStore';
import ArticleCard from '../component/ArticleCard';
import CategorySelectorTree from '../component/CategorySelectorTree';
import '../style/CategoryPage.css';
import { Folder, Plus, Edit, EyeOff } from 'lucide-react';
import { showSuccess, showError, showWarning } from '../utils/toastUtils';
import ConfirmationModal from '../component/ConfirmationModal';
import { writerPermissionsAPI } from '../api/apiServese';

const CategoryPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const categoryId = useMemo(() => Number(id), [id]);

  const {
    categories,
    selectedCategory,
    setSelectedCategory,
    fetchGuestCategories,
    isLoading: categoriesLoading,
    childCategories,
    fetchChildCategories,
    fetchCategories,
    createCategory,
    updateCategory,
    softDeleteCategory,
  } = useCategoryStore();

  const {
    articles,
    articlesByCategory,
    fetchArticlesByCategory,
    fetchGuestArticlesByCategory,
    isLoading: articlesLoading
  } = useArticleStore();

  const { accessRoles, fetchAllAccessRoles } = useAccessRoleStore();
  const { isAuthenticated, hasRole } = useAuthStore();

  // üîç –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
  const [searchQuery, setSearchQuery] = useState('');
  const [localLoading, setLocalLoading] = useState(true);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é
  const [openDropdownId, setOpenDropdownId] = useState(null);
  const dropdownRefs = useRef({});

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingCategory, setEditingCategory] = useState(null);
  const [parentCategory, setParentCategory] = useState(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º
  const [newCategory, setNewCategory] = useState({
    description: '',
    iconPath: '',
    accessRoles: [],
    parentId: null,
  });

  const [editCategory, setEditCategory] = useState({
    id: null,
    description: '',
    iconPath: '',
    accessRoles: [],
    parentId: null,
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const [confirmModal, setConfirmModal] = useState({
    isOpen: false,
    title: '',
    message: '',
    onConfirm: () => {},
  });

  // === –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ WRITER ===
  const [canWriterEdit, setCanWriterEdit] = useState(null);
  const [isWriterPermissionLoading, setIsWriterPermissionLoading] = useState(false);
  const [writerPermissionError, setWriterPermissionError] = useState(null);

  // === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ WRITER ===
const checkWriterPermission = async (catId) => {
  if (!isAuthenticated || catId == null || isNaN(catId)) {
    if (canWriterEdit !== null) setCanWriterEdit(null);
    return;
  }
  if (hasRole('ADMIN') || hasRole('MODERATOR')) {
    setCanWriterEdit(true);
    return;
  }
  if (hasRole('WRITER')) {
    setIsWriterPermissionLoading(true);
    setWriterPermissionError(null);
    try {
      const response = await writerPermissionsAPI.canEditArticle(catId);
      const isAllowed = response?.data === true;
      setCanWriterEdit(isAllowed);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ WRITER –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${catId}:`, err);
      setWriterPermissionError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.');
      setCanWriterEdit(false);
    } finally {
      setIsWriterPermissionLoading(false);
    }
  } else {
    setCanWriterEdit(false);
  }
};

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ categoryId –∏–ª–∏ —Ä–æ–ª–∏
  useEffect(() => {
    checkWriterPermission(categoryId);
  }, [categoryId, isAuthenticated, hasRole]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π –¥–æ—Å—Ç—É–ø–∞
  useEffect(() => {
    fetchAllAccessRoles();
  }, [fetchAllAccessRoles]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  useEffect(() => {
    let isMounted = true;
    const loadCategoryData = async () => {
      setLocalLoading(true);
      try {
        if (isAuthenticated) {
          await fetchCategories();
        } else {
          await fetchGuestCategories();
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      } finally {
        if (isMounted) {
          setLocalLoading(false);
        }
      }
    };
    if (!isNaN(categoryId)) {
      loadCategoryData();
    } else {
      setLocalLoading(false);
    }
    return () => {
      isMounted = false;
    };
  }, [categoryId, isAuthenticated, fetchCategories, fetchGuestCategories]);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  useEffect(() => {
    if (!localLoading && categories.length > 0) {
      const foundCategory = categories.find((cat) => cat.id === categoryId);
      if (foundCategory) {
        setSelectedCategory(foundCategory);
      } else {
        console.warn(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID ${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ.`);
      }
    }
  }, [categories, categoryId, localLoading, setSelectedCategory]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  useEffect(() => {
    let isMounted = true;
    const loadChildren = async () => {
      if (!isNaN(categoryId)) {
        try {
          await fetchChildCategories(categoryId);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        }
      }
    };
    if (isMounted && !isNaN(categoryId)) {
      loadChildren();
    }
    return () => {
      isMounted = false;
    };
  }, [categoryId, fetchChildCategories]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    let isMounted = true;
    const loadArticles = async () => {
      if (!isNaN(categoryId)) {
        try {
          if (isAuthenticated) {
            await fetchArticlesByCategory(categoryId);
          } else {
            await fetchGuestArticlesByCategory(categoryId);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π:', error);
        }
      }
    };
    if (isMounted && !isNaN(categoryId)) {
      loadArticles();
    }
    return () => {
      isMounted = false;
    };
  }, [categoryId, isAuthenticated, fetchArticlesByCategory, fetchGuestArticlesByCategory]);

  // –†–∞–∑–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
  const toggleDropdown = (id, event) => {
    event.stopPropagation();
    setOpenDropdownId(openDropdownId === id ? null : id);
  };

  const handleClickOutside = (event) => {
    if (openDropdownId && dropdownRefs.current[openDropdownId] && !dropdownRefs.current[openDropdownId].contains(event.target)) {
      setOpenDropdownId(null);
    }
  };

  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [openDropdownId]);

  const getArticleWord = (count) => {
    const lastDigit = count % 10;
    const lastTwoDigits = count % 100;
    if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
      return '—Å—Ç–∞—Ç–µ–π';
    }
    switch (lastDigit) {
      case 1:
        return '—Å—Ç–∞—Ç—å—è';
      case 2:
      case 3:
      case 4:
        return '—Å—Ç–∞—Ç—å–∏';
      default:
        return '—Å—Ç–∞—Ç–µ–π';
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const currentChildCategories = childCategories[categoryId] || [];

  // –°—Ç–∞—Ç—å–∏ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categoryArticles = isAuthenticated
    ? (articles || []).filter(
        (article) =>
          (article.categoryDto?.id || article.categoryId || article.category?.id) === categoryId
      )
    : (articlesByCategory[categoryId] || []);

  // üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
  const filteredArticles = searchQuery
    ? categoryArticles.filter((article) => {
        const query = searchQuery.toLowerCase();
        return (
          article.title?.toLowerCase?.().includes(query) ||
          (article.description?.ops &&
            Array.isArray(article.description.ops) &&
            article.description.ops.some((op) =>
              typeof op.insert === 'string' ? op.insert.toLowerCase().includes(query) : false
            ))
        );
      })
    : categoryArticles;

  // =======================
  // –ü–æ–¥—Å—á–µ—Ç –ø–æ –¥–µ—Ä–µ–≤—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  // =======================

  // –í—Å–µ ID –ø–æ—Ç–æ–º–∫–æ–≤ (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é)
  const descendantIds = useMemo(() => {
    const root = Number(categoryId);
    if (Number.isNaN(root)) return [];
    const ids = new Set([root]);

    const byParent = (Array.isArray(categories) ? categories : []).reduce((acc, c) => {
      const pid = c?.parentId ?? null;
      const cid = Number(c?.id);
      if (!Number.isNaN(cid)) {
        (acc[pid] ||= []).push(cid);
      }
      return acc;
    }, {});

    const stack = [root];
    let guard = 0;
    while (stack.length && guard < 5000) {
      const cur = stack.pop();
      const children = byParent[cur] || [];
      for (const cid of children) {
        if (!ids.has(cid)) {
          ids.add(cid);
          stack.push(cid);
        }
      }
      guard++;
    }
    if (guard >= 5000) {
      console.warn('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≥–ª—É–±–∏–Ω—É –æ–±—Ö–æ–¥–∞ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ.');
    }
    return Array.from(ids);
  }, [categories, categoryId]);

  // –ü—Ä–µ–¥–∏–∫–∞—Ç –ø–æ–∏—Å–∫–∞
  const matchesSearch = useCallback(
    (article) => {
      if (!searchQuery) return true;
      const q = String(searchQuery).toLowerCase();
      const titleOk = article?.title?.toLowerCase?.().includes(q);
      const ops = article?.description?.ops;
      const bodyOk = Array.isArray(ops) && ops.some(op => typeof op.insert === 'string' && op.insert.toLowerCase().includes(q));
      return Boolean(titleOk || bodyOk);
    },
    [searchQuery]
  );

  // –†–µ—Ñ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö fetch –ø–æ –¥–æ—á–µ—Ä–Ω–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const fetchedDescendantIdsRef = useRef(new Set());

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º cache –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    fetchedDescendantIdsRef.current = new Set();
  }, [categoryId]);

  // –î–æ–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–µ–¥–∏–Ω–æ–∂–¥—ã –Ω–∞ id)
  useEffect(() => {
    if (!Array.isArray(descendantIds) || descendantIds.length === 0) return;

    const otherIds = descendantIds.filter(idNum => idNum !== Number(categoryId));
    if (otherIds.length === 0) return;

    // –í–ê–ñ–ù–û: –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ articles/articlesByCategory/—Ñ—É–Ω–∫—Ü–∏–∏,
    // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–∞—Å–∫–∞–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –Ω–∞ –∫–∞–∂–¥—É—é –∑–∞–≥—Ä—É–∑–∫—É.
    for (const cid of otherIds) {
      if (fetchedDescendantIdsRef.current.has(cid)) continue;

      if (isAuthenticated) {
        const hasAny = (articles || []).some(a => {
          const aCid = a?.categoryDto?.id ?? a?.categoryId ?? a?.category?.id;
          return Number(aCid) === Number(cid);
        });
        // –ü–æ–º–µ—á–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤—ã –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–µ
        fetchedDescendantIdsRef.current.add(cid);
        if (!hasAny) {
          // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –ø–æ—Ç–æ–º–∫–∞
          fetchArticlesByCategory(cid);
        }
      } else {
        const hasBucket = Boolean(articlesByCategory && articlesByCategory[cid]);
        fetchedDescendantIdsRef.current.add(cid);
        if (!hasBucket) {
          fetchGuestArticlesByCategory(cid);
        }
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [descendantIds, categoryId, isAuthenticated]);

  // –í—Å–µ —Å—Ç–∞—Ç—å–∏ –ø–æ –¥–µ—Ä–µ–≤—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—É—á–∏—Ç—ã–≤–∞—è –ø–æ–∏—Å–∫)
  const allArticlesInTree = useMemo(() => {
    if (!Array.isArray(descendantIds) || descendantIds.length === 0) return [];
    const idSet = new Set(descendantIds.map(Number));

    if (isAuthenticated) {
      return (articles || [])
        .filter(a => {
          const cid = a?.categoryDto?.id ?? a?.categoryId ?? a?.category?.id;
          return cid && idSet.has(Number(cid));
        })
        .filter(matchesSearch);
    } else {
      const buckets = descendantIds.map(idNum => articlesByCategory[idNum] || []);
      return buckets.flat().filter(matchesSearch);
    }
  }, [isAuthenticated, descendantIds, articles, articlesByCategory, matchesSearch]);

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  const clearSearch = () => {
    setSearchQuery('');
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  const currentCategory = selectedCategory || categories.find((cat) => cat.id === categoryId);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  const getCategoryPath = (category) => {
    const path = [];
    let current = category;
    let iterations = 0;
    const maxIterations = 100;
    while (current && iterations < maxIterations) {
      path.unshift(current);
      if (current.parentId) {
        const next = categories.find(cat => cat.id === current.parentId);
        if (!next) {
          console.warn(`–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID ${current.parentId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
          break;
        }
        current = next;
      } else {
        current = null;
      }
      iterations++;
    }
    if (iterations >= maxIterations) {
      console.error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–æ–∑–º–æ–∂–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞.');
    }
    return path;
  };

  const categoryPath = currentCategory ? getCategoryPath(currentCategory) : [];

  const handleBack = () => {
    navigate(-1);
  };
  const handleForward = () => {
    navigate(1);
  };

  // === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω ===
    const openCreateChildModal = (parentCategoryItem) => {
        setParentCategory(parentCategoryItem);

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        let inheritedAccessRoles = [];

        if (parentCategoryItem.accessRolesDto && Array.isArray(parentCategoryItem.accessRolesDto)) {
            // –ö–æ–ø–∏—Ä—É–µ–º —Ä–æ–ª–∏ –∏–∑ accessRolesDto
            inheritedAccessRoles = parentCategoryItem.accessRolesDto.map(role => ({
                id: role.id,
                title: role.title
            }));
        } else if (parentCategoryItem.accessRoles && Array.isArray(parentCategoryItem.accessRoles)) {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - accessRoles –±–µ–∑ Dto
            inheritedAccessRoles = parentCategoryItem.accessRoles.map(role => ({
                id: role.id,
                title: role.title
            }));
        }

        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º —Ä–æ–ª–µ–π:', {
            parentId: parentCategoryItem.id,
            parentDescription: parentCategoryItem.description,
            inheritedRoles: inheritedAccessRoles
        });

        setNewCategory({
            description: '',
            iconPath: '',
            accessRoles: inheritedAccessRoles, // ‚úÖ –ù–∞—Å–ª–µ–¥—É–µ–º —Ä–æ–ª–∏ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            parentId: parentCategoryItem.id,
        });
        setShowCreateModal(true);
    };

  const openEditForm = (category) => {
    setEditingCategory(category);
    setEditCategory({
      id: category.id,
      description: category.description,
      iconPath: category.iconPath || '',
      accessRoles: category.accessRolesDto || [],
      parentId: category.parentId || null,
    });
    setShowEditModal(true);
  };

  const handleCreateInputChange = (e) => {
    const { name, value } = e.target;
    setNewCategory({ ...newCategory, [name]: value });
  };

  const handleCreateAccessRoleChange = (roleId, roleTitle, isChecked) => {
    if (hasRole('WRITER') && roleTitle === 'FULL_ACCESS') {
      showWarning('–ü–∏—Å–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ä–æ–ª—å FULL_ACCESS');
      return;
    }
    let updatedAccessRoles = [...newCategory.accessRoles];
    if (isChecked) {
      updatedAccessRoles.push({ id: roleId, title: roleTitle });
    } else {
      updatedAccessRoles = updatedAccessRoles.filter((role) => role.id !== roleId);
    }
    setNewCategory({ ...newCategory, accessRoles: updatedAccessRoles });
  };

  const isCreateAccessRoleSelected = (roleId) => {
    return newCategory.accessRoles.some((role) => role.id === roleId);
  };

  const handleEditInputChange = (e) => {
    const { name, value } = e.target;
    if (name === 'parentId') {
      let parentIdValue = null;
      if (value !== '' && value !== 'null') {
        parentIdValue = parseInt(value, 10);
        if (isNaN(parentIdValue)) {
          console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ parentId, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ null:', value);
          parentIdValue = null;
        }
      }
      setEditCategory(prev => ({ ...prev, parentId: parentIdValue }));
    } else {
      setEditCategory(prev => ({ ...prev, [name]: value }));
    }
  };

  const handleEditAccessRoleChange = (roleId, roleTitle, isChecked) => {
    if (hasRole('WRITER') && roleTitle === 'FULL_ACCESS') {
      showWarning('–ü–∏—Å–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ä–æ–ª—å FULL_ACCESS');
      return;
    }
    let updatedAccessRoles = [...editCategory.accessRoles];
    if (isChecked) {
      updatedAccessRoles.push({ id: roleId, title: roleTitle });
    } else {
      updatedAccessRoles = updatedAccessRoles.filter((role) => role.id !== roleId);
    }
    setEditCategory({ ...editCategory, accessRoles: updatedAccessRoles });
  };

  const isEditAccessRoleSelected = (roleId) => {
    return editCategory.accessRoles.some((role) => role.id === roleId);
  };

  // === –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
  const handleCreateCategory = async (e) => {
    e.preventDefault();
    const categoryDto = {
      description: newCategory.description,
      iconPath: newCategory.iconPath,
      accessRolesDto: newCategory.accessRoles,
      parentId: newCategory.parentId,
    };
    try {
      const success = await createCategory(categoryDto);
      if (success) {
        showSuccess(newCategory.parentId
          ? `–î–æ—á–µ—Ä–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${newCategory.description}" —Å–æ–∑–¥–∞–Ω–∞`
          : `–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${newCategory.description}" —Å–æ–∑–¥–∞–Ω–∞`);
        setShowCreateModal(false);
        setParentCategory(null);
        setNewCategory({ description: '', iconPath: '', accessRoles: [], parentId: null });
        if (newCategory.parentId) {
          await fetchChildCategories(newCategory.parentId);
        } else {
          await fetchCategories();
        }
      } else {
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + (error.message || ''));
    }
  };

  // === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
  const handleEditCategory = async (e) => {
    e.preventDefault();
    const updateCategoryDto = {
      id: editCategory.id,
      description: editCategory.description,
      iconPath: editCategory.iconPath,
      accessRolesDto: editCategory.accessRoles,
      parentId: editCategory.parentId,
    };
    try {
      const updateSuccess = await updateCategory(editCategory.id, updateCategoryDto);
      if (updateSuccess) {
        showSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        setShowEditModal(false);
        setEditingCategory(null);
        setEditCategory({ id: null, description: '', iconPath: '', accessRoles: [], parentId: null });
        if (!isNaN(categoryId)) {
          await fetchChildCategories(categoryId);
        }
        await fetchCategories();
      } else {
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + (error.message || ''));
    }
  };

  // === –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
  const handleSoftDelete = (categoryIdToDelete, description) => {
    setConfirmModal({
      isOpen: true,
      title: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      message: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${description}"?`,
      onConfirm: async () => {
        try {
          const success = await softDeleteCategory(categoryIdToDelete, true);
          if (success) {
            showSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            if (categoryIdToDelete === categoryId) {
              await fetchChildCategories(categoryId);
            } else {
              const categoryToDelete = categories.find(c => c.id === categoryIdToDelete);
              if (categoryToDelete && categoryToDelete.parentId) {
                await fetchChildCategories(categoryToDelete.parentId);
              } else {
                await fetchCategories();
              }
            }
          } else {
            showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
          showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + (error.message || ''));
        } finally {
          setConfirmModal(prev => ({ ...prev, isOpen: false }));
        }
      },
    });
  };

  // === –ü—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ ===
  const showCreateButtons = useMemo(() => {
    return isAuthenticated && (
      hasRole('ADMIN') || hasRole('MODERATOR') ||
      (hasRole('WRITER') && !isWriterPermissionLoading && canWriterEdit === true)
    );
  }, [isAuthenticated, hasRole, isWriterPermissionLoading, canWriterEdit]);

  // –°–∫–µ–ª–µ—Ç–æ–Ω/–∑–∞–≥—Ä—É–∑–∫–∞
  if (localLoading || categoriesLoading || (isNaN(categoryId))) {
    return (
      <div className="knowledgehub-empty-articles-state">
        <div className="knowledgehub-loader-spinner">
          <div className="knowledgehub-spinner-ring"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...</p>
        </div>
      </div>
    );
  }

  // –ù–µ –Ω–∞–π–¥–µ–Ω–∞
  if (!currentCategory && !localLoading && categories.length > 0) {
    return (
      <div className="knowledgehub-empty-articles-state">
        <h3>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h3>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.</p>
      </div>
    );
  }

  // –ï—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (!currentCategory) {
    return (
      <div className="knowledgehub-empty-articles-state">
        <div className="knowledgehub-loader-spinner">
          <div className="knowledgehub-spinner-ring"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="knowledgehub-category-view">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <header className="knowledgehub-category-header">
        <div className="knowledgehub-header-container">
          <h1 className="knowledgehub-category-title">
            {currentCategory.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}
          </h1>
          <div className="knowledgehub-category-meta">
            <span className="knowledgehub-article-count">
              {allArticlesInTree.length} {getArticleWord(allArticlesInTree.length)}
            </span>
          </div>
        </div>

        {/* –ü–æ–∏—Å–∫ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className="knowledgehub-category-search">
          <div className="knowledgehub-search-wrapper">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              fill="currentColor"
              viewBox="0 0 16 16"
              className="knowledgehub-search-icon"
            >
              <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
            </svg>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—å—è–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="knowledgehub-search-input"
            />
            {searchQuery && (
              <button className="knowledgehub-clear-search" onClick={clearSearch}>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="12"
                  height="12"
                  fill="currentColor"
                  viewBox="0 0 16 16"
                >
                  <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                </svg>
              </button>
            )}
          </div>
        </div>
      </header>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      <div className="knowledgehub-breadcrumb-navigation">
        <div className="knowledgehub-back-forward-controls">
          <button
            onClick={handleBack}
            className="knowledgehub-back-btn"
            aria-label="–ù–∞–∑–∞–¥"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M15 8a.5.5 0 0 1-.5-.5H7.707l1.147-1.147a.5.5 0 0 0-.707-.707l-3 3a.5.5 0 0 0 0 .707l3 3a.5.5 0 0 0 .707-.707L7.707 9.5H14.5A.5.5 0 0 1 15 10v-2z" />
            </svg>
          </button>
          <button
            onClick={handleForward}
            className="knowledgehub-forward-btn"
            aria-label="–í–ø–µ—Ä—ë–¥"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M1 8a.5.5 0 0 1 .5-.5H8.707l-1.147-1.147a.5.5 0 0 1 .707-.707l3 3a.5.5 0 0 1 0 .707l-3 3a.5.5 0 0 1-.707-.707L8.707 9.5H1.5A.5.5 0 0 1 1 9v-1z" />
            </svg>
          </button>
        </div>

        {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ */}
        <nav aria-label="–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º">
          <ol className="breadcrumb">
            <li className="breadcrumb-item">
              <Link to="/" className="breadcrumb-link">
                <span className="breadcrumb-text">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
              </Link>
            </li>
            {categoryPath.map((category, index) => {
              const isLast = index === categoryPath.length - 1;
              return (
                <li key={category.id} className={`breadcrumb-item ${isLast ? 'active' : ''}`}>
                  {isLast ? (
                    <span className="breadcrumb-text" aria-current="page">
                      {category.description}
                    </span>
                  ) : (
                    <Link
                      to={`/category/${category.id}`}
                      className="breadcrumb-link"
                    >
                      <span className="breadcrumb-text">{category.description}</span>
                    </Link>
                  )}
                </li>
              );
            })}
          </ol>
        </nav>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è */}
      {showCreateButtons && (
        <div className="knowledgehub-create-buttons">
          <button
            className="knowledgehub-create-btn"
            onClick={() => openCreateChildModal(currentCategory)}
          >
            <Plus size={16} /> –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
          </button>
          <Link
            to={`/create-article?categoryId=${categoryId}`}
            className="knowledgehub-create-btn"
          >
            <Plus size={16} /> –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—å—é
          </Link>
        </div>
      )}

      {/* –î–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      {currentChildCategories.length > 0 && (
        <section className="knowledgehub-subcategories-section">
          <h2 className="knowledgehub-subcategories-title">–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
          <div className="knowledgehub-articles-grid-layout">
            {currentChildCategories.map((subcategory) => (
              <div
                key={subcategory.id}
                className="knowledgehub-article-card-wrapper"
              >
                <Link
                  to={`/category/${subcategory.id}`}
                  className="knowledgehub-article-card"
                >
                  <div className="knowledgehub-article-card-content">
                    <div className="knowledgehub-article-card-header">
                      <div className="knowledgehub-article-icon">
                        {subcategory.iconPath ? (
                          <img
                            src={subcategory.iconPath}
                            alt={subcategory.description}
                            className="knowledgehub-article-icon-img"
                          />
                        ) : (
                          <div className="knowledgehub-article-icon-placeholder">
                            <Folder size={30} />
                          </div>
                        )}
                      </div>
                      <h3 className="knowledgehub-article-kat-title">
                        {subcategory.description}
                      </h3>
                    </div>
                    <div className="knowledgehub-article-card-meta">
                      <span className="knowledgehub-article-card-category">
                        –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
                      </span>
                    </div>
                  </div>
                </Link>

                {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                {isAuthenticated && (hasRole('ADMIN') || (hasRole('WRITER') && canWriterEdit)) && (
                  <div className="knowledgehub-dropdown-container">
                    <button
                      className="drop_down_menu"
                      onClick={(e) => toggleDropdown(subcategory.id, e)}
                      aria-haspopup="true"
                      aria-expanded={openDropdownId === subcategory.id}
                    >
                      ...
                    </button>
                    {openDropdownId === subcategory.id && (
                      <div
                        className="knowledgehub-dropdown-menu"
                        ref={(el) => (dropdownRefs.current[subcategory.id] = el)}
                      >
                        <button
                          className="knowledgehub-dropdown-item"
                          onClick={() => openEditForm(subcategory)}
                        >
                          <Edit size={16} /> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                        <button
                          className="knowledgehub-dropdown-item"
                          onClick={() => handleSoftDelete(subcategory.id, subcategory.description)}
                        >
                          <EyeOff size={16} /> –û—Ç–∫–ª—é—á–∏—Ç—å
                        </button>
                      </div>
                    )}
                  </div>
                )}
              </div>
            ))}
          </div>
        </section>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π */}
      <main className="knowledgehub-articles-section">
        <h2 className="knowledgehub-subcategories-title">–°—Ç–∞—Ç—å–∏</h2>
        {articlesLoading && !searchQuery ? (
          <div className="knowledgehub-loader-spinner">
            <div className="knowledgehub-spinner-ring"></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏...</p>
          </div>
        ) : filteredArticles.length > 0 ? (
          <div className="knowledgehub-articles-grid-layout">
            {filteredArticles
              .slice() // —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
              .sort((a, b) => (a.id || 0) - (b.id || 0)) // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ id –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
              .map((article) => (
                <ArticleCard key={article.id} article={article} />
              ))}
          </div>
        ) : (
          <div className="knowledgehub-empty-articles-state">
            <h3>{searchQuery ? '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}</h3>
            <p>
              {searchQuery
                ? `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`
                : '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.'}
            </p>
            {searchQuery && (
              <button className="knowledgehub-clear-search-btn" onClick={clearSearch}>
                –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫
              </button>
            )}
          </div>
        )}
      </main>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: —Å–æ–∑–¥–∞–Ω–∏–µ */}
      {showCreateModal && (
        <div
          className="cmp-modal-overlay"
          aria-hidden={!showCreateModal}
          onClick={() => setShowCreateModal(false)}
        >
          <div
            className="cmp-modal-content"
            role="dialog"
            aria-labelledby="cmp-create-title"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="cmp-modal-header">
              <h2 id="cmp-create-title">
                {newCategory.parentId
                  ? `–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è "${parentCategory?.description}"`
                  : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é'}
              </h2>
              <button
                className="cmp-modal-close-btn"
                aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
                onClick={() => setShowCreateModal(false)}
              >
                √ó
              </button>
            </div>
            <form onSubmit={handleCreateCategory} className="cmp-modal-form">
              {newCategory.parentId && (
                <div className="cmp-form-group">
                  <label>–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                  <div className="parent-category-info">
                    <strong>{parentCategory?.description}</strong>
                  </div>
                </div>
              )}
              <div className="cmp-form-group">
                <label htmlFor="cmp-create-description">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</label>
                <input
                  type="text"
                  id="cmp-create-description"
                  name="description"
                  value={newCategory.description}
                  onChange={handleCreateInputChange}
                  required
                />
              </div>
              <div className="cmp-form-group">
                <label htmlFor="cmp-create-iconPath">–ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ</label>
                <input
                  type="text"
                  id="cmp-create-iconPath"
                  name="iconPath"
                  value={newCategory.iconPath}
                  onChange={handleCreateInputChange}
                />
              </div>
              <div className="cmp-form-group">
                <label>–†–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞</label>
                <div className="cmp-access-roles-grid">
                  {accessRoles.length === 0 ? (
                    <span className="cmp-no-roles">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π</span>
                  ) : (
                    accessRoles.map((role) => (
                      <label
                        key={role.id}
                        className="cmp-checkbox-label"
                        style={hasRole('WRITER') && role.title === 'FULL_ACCESS' ? { opacity: 0.5, cursor: 'not-allowed' } : {}}
                      >
                        <input
                          type="checkbox"
                          checked={isCreateAccessRoleSelected(role.id)}
                          onChange={(e) =>
                            handleCreateAccessRoleChange(role.id, role.title, e.target.checked)
                          }
                          disabled={hasRole('WRITER') && role.title === 'FULL_ACCESS'}
                        />
                        <span className="cmp-checkbox-custom"></span>
                        <span className="role-title">{role.title}</span>
                      </label>
                    ))
                  )}
                </div>
              </div>
              <div className="cmp-form-actions">
                <button
                  type="button"
                  className="cmp-btn cmp-btn-secondary"
                  onClick={() => setShowCreateModal(false)}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button type="submit" className="cmp-btn cmp-btn-primary">
                  {newCategory.parentId ? '–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é' : '–°–æ–∑–¥–∞—Ç—å'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */}
      {showEditModal && editingCategory && (
        <div
          className="cmp-modal-overlay"
          aria-hidden={!showEditModal}
          onClick={() => setShowEditModal(false)}
        >
          <div
            className="cmp-modal-content"
            role="dialog"
            aria-labelledby="cmp-edit-title"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="cmp-modal-header">
              <h2 id="cmp-edit-title">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h2>
              <button
                className="cmp-modal-close-btn"
                aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
                onClick={() => setShowEditModal(false)}
              >
                √ó
              </button>
            </div>
            <form onSubmit={handleEditCategory} className="cmp-modal-form">
              <div className="cmp-form-group">
                <label htmlFor="cmp-edit-description">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</label>
                <input
                  type="text"
                  id="cmp-edit-description"
                  name="description"
                  value={editCategory.description}
                  onChange={handleEditInputChange}
                  required
                />
              </div>
              <div className="cmp-form-group">
                <label htmlFor="cmp-edit-iconPath">–ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ</label>
                <input
                  type="text"
                  id="cmp-edit-iconPath"
                  name="iconPath"
                  value={editCategory.iconPath}
                  onChange={handleEditInputChange}
                />
              </div>

              {/* –í—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ –¥–µ—Ä–µ–≤–æ */}
              <div className="cmp-form-group">
                <label>–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                <div className="category-selector" style={{ maxHeight: '200px', overflowY: 'auto' }}>
                  <CategorySelectorTree
                    categories={categories.filter(cat => cat.id !== editingCategory.id)}
                    selectedCategoryId={editCategory.parentId ? String(editCategory.parentId) : ''}
                    onSelect={(selectedId) => {
                      let parentIdValue = null;
                      if (selectedId !== '' && selectedId !== 'null') {
                        parentIdValue = parseInt(selectedId, 10);
                        if (isNaN(parentIdValue)) parentIdValue = null;
                      }
                      setEditCategory(prev => ({ ...prev, parentId: parentIdValue }));
                    }}
                  />
                </div>
              </div>

              <div className="cmp-form-group_role">
                <label>–†–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞</label>
                <div className="cmp-access-roles-grid">
                  {accessRoles.length === 0 ? (
                    <span className="cmp-no-roles">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π</span>
                  ) : (
                    accessRoles.map((role) => (
                      <label
                        key={role.id}
                        className="cmp-checkbox-label"
                        style={hasRole('WRITER') && role.title === 'FULL_ACCESS' ? { opacity: 0.5, cursor: 'not-allowed' } : {}}
                      >
                        <input
                          type="checkbox"
                          checked={isEditAccessRoleSelected(role.id)}
                          onChange={(e) =>
                            handleEditAccessRoleChange(role.id, role.title, e.target.checked)
                          }
                          disabled={hasRole('WRITER') && role.title === 'FULL_ACCESS'}
                        />
                        <span className="cmp-checkbox-custom"></span>
                        <span className="role-title">{role.title}</span>
                      </label>
                    ))
                  )}
                </div>
              </div>
              <div className="cmp-form-actions">
                <button
                  type="button"
                  className="cmp-btn cmp-btn-secondary"
                  onClick={() => setShowEditModal(false)}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button type="submit" className="cmp-btn cmp-btn-primary">
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ */}
      <ConfirmationModal
        isOpen={confirmModal.isOpen}
        title={confirmModal.title}
        message={confirmModal.message}
        onConfirm={confirmModal.onConfirm}
        onCancel={() => setConfirmModal({ ...confirmModal, isOpen: false })}
      />
    </div>
  );
};

export default CategoryPage;
