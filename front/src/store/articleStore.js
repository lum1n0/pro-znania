// src/store/articleStore.js
import { create } from 'zustand';
import { articleAPI } from '../api/apiServese';
import { articleVersionsAPI } from '../api/apiServese'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
import { logAction } from '../api/logClient';

export const useArticleStore = create((set, get) => ({
  articles: [],
  articlesByCategory: {},
  searchArticles: [],
  selectedArticle: null,
  isLoading: false,
  error: null,
  selectedVersionAuthorEmail: null,
  pagination: {
    currentPage: 0,
    totalPages: 0,
    totalElements: 0,
    size: 10,
  },

  // üîπ –í–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç–µ–π
  articleVersions: [],
  selectedVersion: null,
  compareResult: null,

  fetchGuestArticles: async (page = 0, size = 10) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.getGuestArticles(page, size);
      const articlesWithUnifiedStructure = response.data.content.map((article) => ({
        ...article,
        categoryId: article.categoryId || article.category?.id || article.categoryDto?.id,
        categoryDto: article.categoryDto || { id: article.categoryId || article.category?.id },
      }));
      set({
        articles: articlesWithUnifiedStructure,
        pagination: {
          currentPage: response.data.number,
          totalPages: response.data.totalPages,
          totalElements: response.data.totalElements,
          size: response.data.size,
        },
        isLoading: false,
      });
    } catch (error) {
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å'
            : error.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π',
        isLoading: false,
      });
    }
  },

  fetchGuestArticlesByCategory: async (categoryId) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.getGuestArticlesByCategory(categoryId);
      const articlesWithCategory = response.data.map((article) => ({
        ...article,
        categoryDto: { ...article.categoryDto, id: Number(categoryId) },
      }));
      set((state) => ({
        articlesByCategory: {
          ...state.articlesByCategory,
          [categoryId]: articlesWithCategory,
        },
        isLoading: false,
      }));
    } catch (error) {
      set({
        error: error.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π',
        isLoading: false,
      });
    }
  },

  clearArticlesByCategory: (categoryId) => {
    set((state) => {
      const newArticles = { ...state.articlesByCategory };
      delete newArticles[categoryId];
      return { articlesByCategory: newArticles };
    });
  },

  searchGuestArticles: async (description) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.searchGuestArticles(description);
      const articles = response.data;
      set({
        searchArticles: articles,
        isLoading: false,
      });
      return { data: articles };
    } catch (error) {
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞'
            : error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π',
        isLoading: false,
      });
      return { data: [] };
    }
  },

  fetchGuestArticleById: async (id) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.getGuestArticleById(id);
      set({ selectedArticle: response.data, isLoading: false });
      return response.data;
    } catch (error) {
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç—å–µ –∑–∞–ø—Ä–µ—â—ë–Ω'
            : error.response?.data?.message || '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
        isLoading: false,
        selectedArticle: null,
      });
      return null;
    }
  },

  fetchArticlesByCategory: async (categoryId) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.getArticlesByCategory(categoryId);
      const articlesWithCategory = response.data.map((article) => ({
        ...article,
        categoryId: Number(categoryId),
        categoryDto: { id: Number(categoryId) },
      }));
      const { articles } = get();
      const otherArticles = articles.filter((article) => {
        const articleCategoryId = article.categoryDto?.id || article.categoryId || article.category?.id;
        return articleCategoryId && Number(articleCategoryId) !== Number(categoryId);
      });
      const newArticles = [...otherArticles, ...articlesWithCategory];
      set({ articles: newArticles, isLoading: false });
      return articlesWithCategory;
    } catch (error) {
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞'
            : error.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π',
        isLoading: false,
      });
      return [];
    }
  },

  fetchAllArticlesByCategoryForAdmin: async (categoryId) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.getAllArticlesByCategoryForAdmin(categoryId);
      const articlesWithCategory = response.data.map((article) => ({
        ...article,
        categoryDto: { id: Number(categoryId) },
      }));
      const { articles } = get();
      const otherArticles = articles.filter((article) => {
        const articleCategoryId = article.categoryDto?.id || article.categoryId || article.category?.id;
        return articleCategoryId && Number(articleCategoryId) !== Number(categoryId);
      });
      const newArticles = [...otherArticles, ...articlesWithCategory];
      set({ articles: newArticles, isLoading: false });
    } catch (error) {
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
            : error.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π',
        isLoading: false,
      });
    }
  },

  fetchArticleById: async (id) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.getArticleById(id);
      const article = response.data;

      if (article.categoryDto) {
        article.category = { ...article.categoryDto };
      }

      if (article.category && article.category.id === 0) {
        article.category = null;
      }

      set({ selectedArticle: article, isLoading: false });
      return article;
    } catch (error) {
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç—å–µ –∑–∞–ø—Ä–µ—â—ë–Ω'
            : error.response?.data?.message || '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
        isLoading: false,
        selectedArticle: null,
      });
      return null;
    }
  },

  fetchAllArticles: async (page = 0, size = 10) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.getAllArticles(page, size);
      const articlesWithUnifiedStructure = response.data.content.map((article) => ({
        ...article,
        categoryId: article.categoryId || article.category?.id || article.categoryDto?.id,
        categoryDto: article.categoryDto || { id: article.categoryId || article.category?.id },
      }));
      set({
        articles: articlesWithUnifiedStructure,
        pagination: {
          currentPage: response.data.number,
          totalPages: response.data.totalPages,
          totalElements: response.data.totalElements,
          size: response.data.size,
        },
        isLoading: false,
      });
    } catch (error) {
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞'
            : error.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π',
        isLoading: false,
      });
    }
  },

  searchArticlesForUser: async (description) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.searchArticlesForUser(description);
      const articlesWithUnifiedStructure = response.data.map((article) => ({
        ...article,
        categoryId: article.categoryId || article.category?.id || article.categoryDto?.id,
        categoryDto: article.categoryDto || { id: article.categoryId || article.category?.id },
      }));
      set({ searchArticles: articlesWithUnifiedStructure, isLoading: false });
    } catch (error) {
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            : error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π',
        isLoading: false,
      });
    }
  },

  searchArticlesForAdmin: async (description) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.searchArticlesForAdmin(description);
      const articlesWithUnifiedStructure = response.data.map((article) => ({
        ...article,
        categoryId: article.categoryId || article.category?.id || article.categoryDto?.id,
        categoryDto: article.categoryDto || { id: article.categoryId || article.category?.id },
      }));
      set({ searchArticles: articlesWithUnifiedStructure, isLoading: false });
    } catch (error) {
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
            : error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π',
        isLoading: false,
      });
    }
  },

  createArticle: async (formData) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.createArticle(formData);
      const { articles } = get();
      set({
        articles: [...articles, response.data],
        isLoading: false,
      });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏'
            : error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏',
        isLoading: false,
      });
      return null;
    }
  },

  updateArticle: async (id, formData) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.updateArticle(id, formData);
      const { articles } = get();
      const updatedArticles = articles.map((article) =>
        article.id === Number(id) ? response.data : article
      );
      set({
        articles: updatedArticles,
        selectedArticle: get().selectedArticle?.id === Number(id) ? response.data : get().selectedArticle,
        isLoading: false,
      });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏'
            : error.response?.data?.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏',
        isLoading: false,
      });
      return null;
    }
  },

  softDeleteArticle: async (id, isDelete = true) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.softDeleteArticle(id, isDelete);
      const { articles } = get();
      const updatedArticles = articles.map((article) =>
        article.id === id ? response.data : article
      );
      set({
        articles: updatedArticles,
        isLoading: false,
      });
      return true;
    } catch (error) {
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏'
            : error.response?.data?.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏',
        isLoading: false,
      });
      return false;
    }
  },

  hardDeleteArticle: async (id) => {
    set({ isLoading: true, error: null });
    try {
      await articleAPI.hardDeleteArticle(id);
      const { articles, articlesByCategory, searchArticles, selectedArticle } = get();

      const updatedArticles = articles.filter((a) => a.id !== id);
      const updatedArticlesByCategory = { ...articlesByCategory };
      Object.keys(updatedArticlesByCategory).forEach((key) => {
        updatedArticlesByCategory[key] = updatedArticlesByCategory[key].filter((a) => a.id !== id);
      });
      const updatedSearch = searchArticles.filter((a) => a.id !== id);
      const newSelectedArticle = selectedArticle?.id === id ? null : selectedArticle;

      set({
        articles: updatedArticles,
        articlesByCategory: updatedArticlesByCategory,
        searchArticles: updatedSearch,
        selectedArticle: newSelectedArticle,
        isLoading: false,
      });

      logAction('INFO', 'ARTICLE_HARD_DELETED', '–°—Ç–∞—Ç—å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞', { articleId: id });
      return true;
    } catch (error) {
      logAction('ERROR', 'ARTICLE_HARD_DELETE_FAIL', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏', {
        articleId: id,
        error: error.message,
      });
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
            : error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å—é',
        isLoading: false,
      });
      return false;
    }
  },

  downloadArticlePdf: async (id) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleAPI.downloadPdf(id);
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      const contentDisposition = response.headers['content-disposition'];
      let filename = 'article.pdf';
      if (contentDisposition) {
        const filenameMatch = contentDisposition.match(/filename[^;=]*=((['"]).*?\2|[^;\n]*)/);
        if (filenameMatch && filenameMatch[1]) {
          filename = filenameMatch[1].replace(/['"]/g, '');
          filename = decodeURIComponent(filename);
        }
      }
      link.setAttribute('download', filename);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
      set({ isLoading: false });
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF:', error);
      set({
        error:
          error.response?.status === 403
            ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF'
            : error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF',
        isLoading: false,
      });
      return false;
    }
  },

  fetchArticleVersions: async (articleId) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleVersionsAPI.getArticleVersions(articleId);
      console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç—å–∏:", response.data); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–∏
      const sortedVersions = response.data?.sort((a, b) => b.version - a.version) || [];
      set({ 
        articleVersions: sortedVersions,
        isLoading: false 
      });
      return sortedVersions;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ä—Å–∏–π —Å—Ç–∞—Ç—å–∏:", error); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      set({
        error: error.response?.data?.message || error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ä—Å–∏–π —Å—Ç–∞—Ç—å–∏',
        isLoading: false,
        articleVersions: []
      });
      return [];
    }
  },

fetchArticleVersion: async (articleId, version) => {
  set({ isLoading: true, error: null });
  try {
    const response = await articleVersionsAPI.getArticleVersion(articleId, version);
    set({
      selectedVersion: response.data,
      selectedVersionAuthorEmail: response.data?.editedByEmail || null,
      isLoading: false
    });
    return response.data;
  } catch (error) {
    set({
      error: error.response?.data?.message || error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç—å–∏',
      isLoading: false,
      selectedVersion: null,
      selectedVersionAuthorEmail: null
    });
    return null;
  }
},

fetchArticleVersionAuthor: async (articleId, version) => {
  try {
    const response = await articleVersionsAPI.getArticleVersionAuthor(articleId, version);
    set({ selectedVersionAuthorEmail: response.data?.email || null });
    return response.data;
  } catch (error) {
    set({ selectedVersionAuthorEmail: null });
    return null;
  }
},

  // --- –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π ---
  compareArticleVersion: async (articleId, fromVersion) => {
    console.log("store: compareArticleVersion –≤—ã–∑–≤–∞–Ω–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:", { articleId, fromVersion });
    set({ isLoading: true, error: null });
    try {
      console.log(`store: –í—ã–∑–æ–≤ articleVersionsAPI.compareArticleVersion(${articleId}, ${fromVersion})`);
      const response = await articleVersionsAPI.compareArticleVersion(articleId, fromVersion);
      console.log("store: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π –æ—Ç API:", response.data);
      set({ 
        compareResult: response.data,
        isLoading: false 
      });
      return response.data;
    } catch (error) {
      console.error("store: –û—à–∏–±–∫–∞ API —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π:", error);
      console.error("store: –û—à–∏–±–∫–∞ API —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π (–¥–µ—Ç–∞–ª–∏):", error.response);
      set({
        error: error.response?.data?.message || error.message || '–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
        isLoading: false,
        compareResult: null
      });
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    }
  },

  restoreArticleVersion: async (articleId, version) => {
    set({ isLoading: true, error: null });
    try {
      const response = await articleVersionsAPI.restoreArticleVersion(articleId, version);
      const { fetchArticleById } = get();
      await fetchArticleById(articleId);
      await get().fetchArticleVersions(articleId);
      set({ isLoading: false });
      return response.data;
    } catch (error) {
      set({
        error: error.response?.data?.message || error.message || '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç—å–∏',
        isLoading: false
      });
      return null;
    }
  },

  // --- –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î ---
  deleteArticleVersion: async (articleId, version) => {
    set({ isLoading: true, error: null });
    try {
      // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
      await articleVersionsAPI.deleteArticleVersion(articleId, version);
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π –≤ store
      const { fetchArticleVersions } = get();
      await fetchArticleVersions(articleId); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π
      set({ isLoading: false });
      return true; // –£—Å–ø–µ—à–Ω–æ
    } catch (error) {
      set({
        error: error.response?.data?.message || error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç—å–∏',
        isLoading: false
      });
      return false; // –û—à–∏–±–∫–∞
    }
  },
  // --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---

  clearArticleVersions: () => {
    set({ 
      articleVersions: [],
      selectedVersion: null,
      compareResult: null 
    });
  },

  setSelectedArticle: (article) => {
    set({ selectedArticle: article });
  },

  clearArticles: () => {
    set({ articles: [] });
  },

  clearError: () => set({ error: null }),
}));